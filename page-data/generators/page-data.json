{"componentChunkName":"component---src-templates-blog-post-js","path":"/generators/","result":{"data":{"site":{"siteMetadata":{"title":"DERMECK'S Blog"}},"markdownRemark":{"id":"f37a46c8-a387-5255-9041-56d8858bb31d","excerpt":"Notes on the talk “Understanding Generator Functions & Using Redux Saga” What are Generators Functions? Generator Functions are functions that can be exited and…","html":"<p><em>Notes on the talk “Understanding Generator Functions &#x26; Using Redux Saga”</em></p>\n<h2>What are Generators Functions?</h2>\n<p>Generator Functions are functions that can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<h3>Declaration</h3>\n<p>They are declared via <code class=\"language-text\">function*</code> keyword.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>git\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">yield</code> expression is used to pause/exit the function and return a value (it an also take in a value when the function is re-entered)</li>\n<li><code class=\"language-text\">*yield</code> is used to delegate to another generator function</li>\n</ul>\n<h3>How to run</h3>\n<ul>\n<li>when the function is called it returns an iterable object called Generator</li>\n<li>when <code class=\"language-text\">next()</code> is called on this object the function body is executed untill the first <code class=\"language-text\">yield</code> is reached</li>\n<li>this call returns objects with properties <code class=\"language-text\">value</code> and <code class=\"language-text\">done</code></li>\n<li><code class=\"language-text\">next()</code> can be called again to proceed with the execution at this point</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Generator { }\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// { value: 1, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// { value: undefined, done: true }</span></code></pre></div>\n<h3>Async example</h3>\n<p>Asynchronous functions which call next when done</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callfetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url2?id=\"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> resp <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> it <span class=\"token operator\">=</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nit<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// start</span></code></pre></div>\n<h3>Ressources:</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=o3A9EvMspig\">Understanding Generator Functions &#x26; Using Redux Saga</a></li>\n<li><a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/function*\">MDN</a></li>\n</ul>","frontmatter":{"title":"Generator Functions Notes","date":"February 24, 2022","description":"Notes on the talk *Understanding Generator Functions & Using Redux Saga* "}},"previous":{"fields":{"slug":"/composite-layers/"},"frontmatter":{"title":"Show Composite Layers In Chrome DevTools"}},"next":null},"pageContext":{"id":"f37a46c8-a387-5255-9041-56d8858bb31d","previousPostId":"f16bbb23-e02c-5e01-b06e-e252e1377f57","nextPostId":null}},"staticQueryHashes":["3000541721","3274528899"]}